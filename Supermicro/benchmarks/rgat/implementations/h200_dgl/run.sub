#!/bin/bash
#SBATCH --job-name graph_neural_networks

# Copyright (c) 2021-2024, NVIDIA CORPORATION. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -euxo pipefail

echo "PROLOG_START $(date +%s)"

# Vars without defaults
: "${DGXSYSTEM:?DGXSYSTEM not set}"
: "${CONT:?CONT not set}"
: "${DATA_DIR:?DATA_DIR not set}"
: "${GRAPH_DIR:?GRAPH_DIR not set}"
: "${WALLTIME_RUNANDTIME:?WALLTIME_RUNANDTIME not set}"

# Vars with defaults
: "${MLPERF_RULESET:=4.1.0}"
: "${CHECK_COMPLIANCE:=1}"
: "${MLPERF_SYSTEM_NAME:='unknown'}"
: "${MLPERF_SCALE:='unknown'}"
: "${MLPERF_CLUSTER_NAME:='unknown'}"
: "${NEXP:=1}"
: "${DATESTAMP:=$(date +'%y%m%d%H%M%S%N')}"
: "${WORK_DIR:=/workspace/gnn}"
: "${CONTAINER_DATA_DIR:=/data}"
: "${CONTAINER_GRAPH_DIR:=/graph}"
: "${API_LOGGING:=0}"
: "${API_LOG_DIR:=./api_logs}" # APILog outputs
: "${POWERCMDDIR:=' '}" # Power measurements

: "${LOGDIR:=${PWD}/results}"
: "${SCRATCH_SPACE:="/raid/scratch"}"

: "${TIME_TAGS:=0}"
: "${DROPCACHE_CMD:="sudo /sbin/sysctl vm.drop_caches=3"}"
NCCL_TEST=${NCCL_TEST:-1}
CLEAR_CACHES=${CLEAR_CACHES:-1}

# override enroot's (sometimes in-use) randomly chosen ephemeral port.  29500
# is non-ephemeral and not assigned by the IANA.  If 29500 is in use on your
# cluster for some other service, then choose a different non-ephemeral
# unassigned port from
# https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
# or https://svn.nmap.org/nmap/nmap-services.  The range that needs to be
# avoided is the ephemeral port range, returned by `sysctl
# net.ipv4.ip_local_port_range` (32768-61000 by default).
: "${MASTER_PORT:=29500}"
export MASTER_PORT

export MASTER_ADDR="$(scontrol show hostnames "${SLURM_JOB_NODELIST-}" | head -n1)"
#export MASTER_ADDR=$(ip -4 -o addr | egrep -v 'enp|127.0.0.1|docker' | awk '{print $4}' | awk -F / '{print $1}' | tail -n1)
echo "using MASTER_ADDR \"${MASTER_ADDR}\" of list \"${SLURM_JOB_NODELIST}\""

export MODEL_NAME="graph_neural_network"
export MODEL_FRAMEWORK="pytorch"
LOGBASE="${DATESTAMP}"
SPREFIX="${MODEL_NAME}_${MODEL_FRAMEWORK}_${DGXNNODES}x${DGXNGPU}x${BATCH_SIZE}_${DATESTAMP}"

if [ ${TIME_TAGS} -gt 0 ]; then
    LOGBASE="${SPREFIX}_mllog"
fi

readonly LOG_FILE_BASE="${LOGDIR}/${LOGBASE}"
readonly _cont_name="${MODEL_NAME}_${SLURM_JOB_ID}"
_cont_mounts="${DATA_DIR}:${CONTAINER_DATA_DIR},${GRAPH_DIR}:${CONTAINER_GRAPH_DIR},${LOGDIR}:/results"
cont_mounts_to_verify="'${CONTAINER_DATA_DIR}'"

if [ "${JET:-0}" -eq 1 ]; then
    _cont_mounts="${_cont_mounts},${JET_DIR}:/root/.jet"
fi

if [ "${API_LOGGING:-0}" -eq 1 ]; then
    API_LOG_DIR=${API_LOG_DIR}/${MODEL_FRAMEWORK}/${MODEL_NAME}/${DGXSYSTEM}
    mkdir -p ${API_LOG_DIR}
    _cont_mounts="${_cont_mounts},${API_LOG_DIR}:/logs"

    # Create JSON file for cuDNN
    JSON_MODEL_NAME="MLPERF_${MODEL_NAME}_${APILOG_MODEL_NAME}_${MODEL_FRAMEWORK}_train"
    JSON_README_LINK="${README_PREFIX}/${MODEL_NAME}/${MODEL_FRAMEWORK}/README.md"
    JSON_FMT='{model_name: $mn, readme_link: $rl, configs: {($dt): [$bs]}, sweep: {($dt): [$bs]}}'
    JSON_OUTPUT="${JSON_MODEL_NAME}.cudnn.json"
    jq -n --indent 4 --arg mn $JSON_MODEL_NAME --arg rl $JSON_README_LINK --arg dt $APILOG_PRECISION --arg bs $BATCH_SIZE "$JSON_FMT" > ${API_LOG_DIR}/$JSON_OUTPUT
fi

# Setup directories
( umask 0002; mkdir -p "${LOGDIR}" )
srun --ntasks="${SLURM_JOB_NUM_NODES}" mkdir -p "${LOGDIR}"

# Setup container
srun \
    --ntasks="${SLURM_JOB_NUM_NODES}" \
    --container-image="${CONT}" \
    --container-name="${_cont_name}" \
    true

echo "NCCL_TEST = ${NCCL_TEST}"
if [[ ${NCCL_TEST} -eq 1 ]]; then
    (srun --mpi="${SLURM_MPI_TYPE:-pmix}" --ntasks="$(( SLURM_JOB_NUM_NODES * DGXNGPU ))" --ntasks-per-node="${DGXNGPU}" \
        --container-name="${_cont_name}" all_reduce_perf_mpi -b 13631488 -e 13631488 -d half    ) |& tee "${LOGDIR}/${SPREFIX}_nccl.log"

fi

# Copies the dataset on-the-fly
if [[ ! "${GRAPH_COPY_SOURCE:-}" = "" ]]; then
    if [[ "${GRAPH_COPY_SOURCE}" = "${GRAPH_DIR}" ]]; then
        echo "Graph copy source path ${GRAPH_COPY_SOURCE} should differ from GRAPH_DIR ${GRAPH_DIR}"
        exit 1
    fi

    srun --ntasks="${SLURM_JOB_NUM_NODES}" mkdir -p $GRAPH_DIR
    srun --ntasks="${SLURM_JOB_NUM_NODES}" rsync -Wa $GRAPH_COPY_SOURCE/* $GRAPH_DIR
fi

if [[ "${GET_MOUNT_INFO:-0}" -eq 1 ]]; then
    (srun --ntasks=1 --ntasks-per-node=1 --container-name="${_cont_name}" \
        --container-mounts="${_cont_mounts}"  \
        python3 -c "from mlperf_common.mountcheck import main; main(${cont_mounts_to_verify})"
    ) |& tee "${LOGDIR}/cont-mount-info.json"
fi

if [[ "${VERIFY_MOUNT:-1}" -eq 1 ]]; then
    (srun --ntasks="${SLURM_JOB_NUM_NODES}" --ntasks-per-node=1 --container-name="${_cont_name}" \
        --container-mounts="${_cont_mounts}"  \
        python3 -c "from mlperf_common.mountcheck import main; main('cont-mount-info.json', check=True)"
    ) |& tee "${LOGDIR}/${SPREFIX}_mountcheck.log"
fi

#GPU power measurements
if [ -f "$POWERCMDDIR/power_monitor.sh"  ]; then
    ( umask 0002; mkdir -p "${ABSLOGDIR}" )
    # Measure GPU power on up to 64 nodes.
    if [ ${SLURM_JOB_NUM_NODES} -gt 64 ]; then
    	( srun --overlap --ntasks=64 bash $POWERCMDDIR/power_monitor.sh ) &
    else
	    ( srun --overlap --ntasks=${SLURM_JOB_NUM_NODES} bash $POWERCMDDIR/power_monitor.sh ) &
    fi
fi

echo "PROLOG_STOP $(date +%s)"

# Run experiments
for _experiment_index in $(seq -w 1 "${NEXP}"); do
    echo "EXPERIMENT_START $(date +%s)"

    (
    echo "Beginning trial ${_experiment_index} of ${NEXP}"
    echo ":::DLPAL ${CONT} ${SLURM_JOB_ID} ${SLURM_JOB_NUM_NODES} ${SLURM_JOB_NODELIST} ${MLPERF_CLUSTER_NAME} ${DGXSYSTEM}"
    echo ":::SYSJSON $(srun --ntasks=1 --container-name="${_cont_name}" mlperf-sysjson.sh)"
    srun --ntasks=1 --container-name="${_cont_name}" bash -c 'echo ":::GITCOMMITID ${GIT_COMMIT_ID} ${LAUNCHER_GIT_COMMIT_ID}"'

    # Clear caches
    if [ "${CLEAR_CACHES}" -eq 1 ]; then
        srun --ntasks="${SLURM_JOB_NUM_NODES}" bash -c "echo -n 'Clearing cache on ' && hostname && sync && ${DROPCACHE_CMD}"
        srun --ntasks="${SLURM_JOB_NUM_NODES}" --container-name="${_cont_name}" python -c "
from utility.logger import mllogger
mllogger.event(key=mllogger.constants.CACHE_CLEAR, value=True)"
    fi

    sleep 30

    # Run experiment
    set +e
    echo "RUNANDTIME_START $(date +%s)"
    srun \
        --ntasks="$(( SLURM_JOB_NUM_NODES * DGXNGPU ))" \
        --ntasks-per-node="${DGXNGPU}" \
        --time="${WALLTIME_RUNANDTIME}" \
        --container-name="${_cont_name}" \
        --container-mounts="${_cont_mounts}" \
        --container-workdir=${WORK_DIR} \
        --container-env=MASTER_PORT,MASTER_ADDR \
        --no-container-mount-home \
        slurm2pytorch ./run_and_time.sh
    echo "RUNANDTIME_STOP $(date +%s)"
    set -e

    ) |& tee "${LOG_FILE_BASE}_${_experiment_index}.log"

    # compliance checker
    if [ "${CHECK_COMPLIANCE}" -eq 1 ]; then
      srun --ntasks=1 --nodes=1 --container-name="${_cont_name}" \
           --container-mounts="$(realpath ${LOGDIR}):/results"   \
           --container-workdir="/results"                        \
           --no-container-mount-home                             \
           python3 -m mlperf_logging.compliance_checker --usage training \
           --ruleset "${MLPERF_RULESET}"                                 \
           --log_output "/results/compliance_${DATESTAMP}.out"           \
           "/results/${LOGBASE}_${_experiment_index}.log" \
     || true
    fi

    if [ "${JET:-0}" -eq 1 ]; then
      _JET_CREATE=${JET_CREATE:-}" --data workload.spec.nodes=${DGXNNODES} --data workload.spec.name=${MODEL_NAME} --data workload.spec.framework=${MODEL_FRAMEWORK} --data workload.spec.scale=${MLPERF_SCALE} --data workload.spec.platform=${DGXSYSTEM} --data workload.key=${MODEL_NAME}_${MODEL_FRAMEWORK}_${DGXSYSTEM} --data workload.spec.datestamp=${DATESTAMP} --data workload.spec.experiment_index=${_experiment_index} --mllogger "
      srun -N1 -n1 --no-container-mount-home --container-name="${_cont_name}" --container-mounts="${_cont_mounts}" --container-remap-root bash -c "${_JET_CREATE} /results/${LOGBASE}_${_experiment_index}.log --asset /results/slurm-${SLURM_JOB_ID}.out --data source_image.name=${CONT} --data slurm.job=${SLURM_JOB_ID} && ${JET_UPLOAD}"
    fi

    echo "EXPERIMENT_STOP $(date +%s)"
done
