#!/bin/bash

# Copyright (c) 2023-2024, NVIDIA CORPORATION. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#SBATCH --job-name mlperf-dlrm:hugectr

set -euxo pipefail

echo "PROLOG_START $(date +%s)"

# Vars without defaults
: "${DGXSYSTEM:?DGXSYSTEM not set}"
: "${CONT:?CONT not set}"
: "${DATADIR:?DATADIR not set}"
: "${WALLTIME_RUNANDTIME:?WALLTIME_RUNANDTIME not set}"

# Vars with defaults
: "${MLPERF_RULESET:=4.1.0}"
: "${MLPERF_SYSTEM_NAME:='unknown'}"
: "${MLPERF_SCALE:='unknown'}"
: "${MLPERF_CLUSTER_NAME:='unknown'}"
: "${NEXP:=1}"
: "${NCCL_TEST:=1}"
: "${DATESTAMP:=$(date +'%y%m%d%H%M%S%N')}"
: "${CLEAR_CACHES:=1}"
: "${CHECK_COMPLIANCE:=1}"
: "${API_LOG_DIR:=./api_logs}" # apiLog.sh output dir
: "${ABSLOGDIR:=${PWD}/results}"
: "${POWERCMDDIR:=' '}"
: "${DATADIR_VAL:=${DATADIR}}"
: "${MOUNTS:=${DATADIR}:/data,${DATADIR_VAL}:/data_val}"
: "${LOGDIR:=./results}"
#: "${SEED:=$RANDOM}"

export MODEL_NAME="recommendation"
export MODEL_FRAMEWORK="pytorch"
#export SEED
LOG_BASE="${DATESTAMP}"
SPREFIX="${MODEL_NAME}_${MODEL_FRAMEWORK}_${DGXNNODES}x${DGXNGPU}x${BATCHSIZE}_${DATESTAMP}"

if [[ "${LOCAL_DATADIR_VAL:-}" ]]; then
    srun --ntasks=${SLURM_JOB_NUM_NODES} bash -c "mkdir -p ${LOCAL_DATADIR_VAL} && rsync -a ${DATADIR_VAL}/val_data.bin ${LOCAL_DATADIR_VAL}"
    export MOUNTS="${DATADIR}:/data,${LOCAL_DATADIR_VAL}:/data_val"
fi

readonly _logfile_base="${LOGDIR}/${DATESTAMP}"
readonly _cont_name="${MODEL_NAME}_${SLURM_JOB_ID}"
_cont_mounts=${MOUNTS}
cont_mounts_to_verify="'/data', '/data_val'"

if [ "${API_LOGGING:-0}" -eq 1 ]; then
    API_LOG_DIR=${API_LOG_DIR}/${MODEL_FRAMEWORK}/${MODEL_NAME}/${DGXSYSTEM}
    mkdir -p ${API_LOG_DIR}
    _cont_mounts="${_cont_mounts},${API_LOG_DIR}:/logs"

    # Create JSON file for cuDNN
    JSON_MODEL_NAME="MLPERF_${MODEL_NAME}_${MODEL_FRAMEWORK}_train"
    JSON_README_LINK="${README_PREFIX}/${MODEL_NAME}/${MODEL_FRAMEWORK}/README.md"
    JSON_FMT='{model_name: $mn, readme_link: $rl, configs: {($dt): [$bs]}, sweep: {($dt): [$bs]}}'
    JSON_OUTPUT="MLPERF_${MODEL_NAME}_${MODEL_FRAMEWORK}_train.cudnn.json"
    jq -n --indent 4 --arg mn $JSON_MODEL_NAME --arg rl $JSON_README_LINK --arg dt $APILOG_PRECISION --arg bs $BATCHSIZE "$JSON_FMT" > ${API_LOG_DIR}/$JSON_OUTPUT
fi
if [ "${JET:-0}" -eq 1 ]; then
    _cont_mounts="${_cont_mounts},${JET_DIR}:/root/.jet,${LOGDIR}:/results"
fi

# make sure the results directory exists on the host
( umask 0002; mkdir -p "${LOGDIR}" )

# Setup container
echo MELLANOX_VISIBLE_DEVICES="${MELLANOX_VISIBLE_DEVICES:-}"
srun --mpi="${SLURM_MPI_TYPE:-pmix}" --ntasks="${SLURM_JOB_NUM_NODES}" --container-image="${CONT}" --container-name="${_cont_name}" true
srun -N1 -n1 --container-name="${_cont_name}" ibv_devinfo --list
srun -N1 -n1 --container-name="${_cont_name}" nvidia-smi topo -m

echo "NCCL_TEST = ${NCCL_TEST}"
if [[ ${NCCL_TEST} -eq 1 ]]; then
    (srun --mpi="${SLURM_MPI_TYPE:-pmix}" --ntasks="$(( SLURM_JOB_NUM_NODES ))" --ntasks-per-node="1" \
         --container-name="${_cont_name}" alltoall_perf_mpi -b 4.1M -e 8.2M -f 2 -d half
    ) |& tee "${LOGDIR}/${SPREFIX}_nccl_alltoall_half.log"
    (srun --mpi="${SLURM_MPI_TYPE:-pmix}" --ntasks="$(( SLURM_JOB_NUM_NODES ))" --ntasks-per-node="1" \
         --container-name="${_cont_name}" alltoall_perf_mpi -b 2K -e 8K -f 2 -t ${DGXNGPU} -d uint32
    ) |& tee "${LOGDIR}/${SPREFIX}_nccl_alltoall_uint32.log"
    (srun --mpi="${SLURM_MPI_TYPE:-pmix}" --ntasks="$(( SLURM_JOB_NUM_NODES ))" --ntasks-per-node="1" \
         --container-name="${_cont_name}" all_reduce_perf_mpi -b 38.3M -e 38.3M -t ${DGXNGPU} -d half
    ) |& tee "${LOGDIR}/${SPREFIX}_nccl_allreduce.log"
fi

if [[ "${GET_MOUNT_INFO:-0}" -eq 1 ]]; then
    (srun --ntasks=1 --ntasks-per-node=1 --container-name="${_cont_name}" \
        --container-mounts="${_cont_mounts}"  \
        python3 -c "from mlperf_common.mountcheck import main; main(${cont_mounts_to_verify})"
    ) |& tee "${LOGDIR}/cont-mount-info.json"
fi

if [[ "${VERIFY_MOUNT:-1}" -eq 1 ]]; then
    (srun --ntasks="${SLURM_JOB_NUM_NODES}" --ntasks-per-node=1 --container-name="${_cont_name}" \
        --container-mounts="${_cont_mounts}"  \
        python3 -c "from mlperf_common.mountcheck import main; main('cont-mount-info.json', check=True)"
    ) |& tee "${LOGDIR}/${SPREFIX}_mountcheck.log"
fi

#GPU power measurements
if [ -f "$POWERCMDDIR/power_monitor.sh"  ]; then
    ( umask 0002; mkdir -p "${ABSLOGDIR}" )
    # Measure GPU power on up to 64 nodes.
    if [ ${SLURM_JOB_NUM_NODES} -gt 64 ]; then
    	( srun --overlap --ntasks=64 bash $POWERCMDDIR/power_monitor.sh ) & 
    else
	    ( srun --overlap --ntasks=${SLURM_JOB_NUM_NODES} bash $POWERCMDDIR/power_monitor.sh ) &
    fi
fi

#Set GPU clocks for MaxQ and MinEDP run
if [[ "${SET_MAXQ_CLK:-0}" == "1" ]] || [[ "${SET_MINEDP_CLK:-0}" == "1" ]]; then
        if [[ "${SET_MAXQ_CLK}" == "1" ]]; then
                GPC_CLK=${MAXQ_CLK}
        fi
        if [[ "${SET_MINEDP_CLK}" == "1" ]]; then
                GPC_CLK=${MINEDP_CLK}
        fi
	srun --ntasks=${SLURM_JOB_NUM_NODES} bash -c "sudo nvidia-smi -lgc ${GPC_CLK}"
fi

echo "PROLOG_STOP $(date +%s)"

# Run experiments
for _experiment_index in $(seq -w 1 "${NEXP}"); do
    echo "EXPERIMENT_START $(date +%s)"

    SEED=$RANDOM
    export SEED
    (
        echo ":::DLPAL ${CONT} ${SLURM_JOB_ID} ${SLURM_JOB_NUM_NODES} ${SLURM_JOB_NODELIST} ${MLPERF_CLUSTER_NAME} ${DGXSYSTEM}"
        echo ":::SYSJSON $(srun --ntasks=1 --container-name="${_cont_name}" mlperf-sysjson.sh)"
        srun --ntasks=1 --container-name="${_cont_name}" bash -c 'echo ":::GITCOMMITID ${GIT_COMMIT_ID} ${LAUNCHER_GIT_COMMIT_ID}"'

        if [[ $CLEAR_CACHES == 1 ]]; then
            srun --mpi="${SLURM_MPI_TYPE:-pmix}" --ntasks="${SLURM_JOB_NUM_NODES}" bash -c "echo -n 'Clearing cache on ' && hostname && sync && sudo /sbin/sysctl vm.drop_caches=3"
            srun --mpi="${SLURM_MPI_TYPE:-pmix}" --ntasks="${SLURM_JOB_NUM_NODES}" --container-name="${_cont_name}" python3 -c "
import mlperf_logging.mllog as mllog
mllogger = mllog.get_mllogger()
mllogger.event(key=mllog.constants.CACHE_CLEAR, value=True)"
        fi

        echo "Beginning trial ${_experiment_index} of ${NEXP}"

        set +e
        echo "RUNANDTIME_START $(date +%s)"
        srun --mpi="${SLURM_MPI_TYPE:-pmix}" \
            --ntasks="${SLURM_JOB_NUM_NODES}" \
            --ntasks-per-node=1 \
            --time="${WALLTIME_RUNANDTIME}" \
            --container-name="${_cont_name}" \
            --container-mounts="${_cont_mounts}" \
            ./run_and_time.sh
        echo "RUNANDTIME_STOP $(date +%s)"
        set -e

    ) |& tee "${_logfile_base}_raw_${_experiment_index}.log"

    # Sorting the MLPerf compliance logs by timestamps
    grep ":::" "${_logfile_base}_raw_${_experiment_index}.log" | sort -k5 -n -s | tee "${_logfile_base}_${_experiment_index}.log"
    if [ "${CHECK_COMPLIANCE}" -eq 1 ]; then
      srun --ntasks=1 --nodes=1 --container-name="${_cont_name}" \
     --container-mounts="$(realpath ${LOGDIR}):/results"   \
     --container-workdir="/results"                        \
     python3 -m mlperf_logging.compliance_checker --usage training \
     --ruleset "${MLPERF_RULESET}"                                 \
     --log_output "/results/compliance_${DATESTAMP}.out"           \
     "/results/${DATESTAMP}_${_experiment_index}.log" \
     || true
    fi

    if [ "${JET:-0}" -eq 1 ]; then
      _JET_CREATE=${JET_CREATE:-}" --data workload.spec.nodes=${DGXNNODES} --data workload.spec.name=${MODEL_NAME} --data workload.spec.framework=${MODEL_FRAMEWORK} --data workload.spec.scale=${MLPERF_SCALE} --data workload.spec.platform=${DGXSYSTEM} --data workload.key=${MODEL_NAME}_${MODEL_FRAMEWORK}_${DGXSYSTEM} --data workload.spec.datestamp=${DATESTAMP} --data workload.spec.experiment_index=${_experiment_index} --mllogger "
      srun -N1 -n1 --container-name="${_cont_name}" --container-mounts="${_cont_mounts}" --container-remap-root bash -c "${_JET_CREATE} /results/${DATESTAMP}_${_experiment_index}.log --asset /results/slurm-${SLURM_JOB_ID}.out --data source_image.name=${CONT} --data slurm.job=${SLURM_JOB_ID} && ${JET_UPLOAD}"
    fi

    echo "EXPERIMENT_STOP $(date +%s)"
done
